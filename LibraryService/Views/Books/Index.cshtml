
@model IEnumerable<LibraryService.Models.Book>

@{
    ViewBag.Title = "Index";
}

@using PagedList.Mvc;
@using PagedList;

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    PagedList<LibraryService.Models.Book> books = ViewBag.onePageOfProducts;
    if (books.Count > 0)
    {
        <h2>List of Books</h2>
        <p>
            @Html.ActionLink("Create New", "Create")
        </p>

        using (Html.BeginForm())
        {
            <p>
                Search books: @Html.TextBox("SearchString")
                <input type="submit" value="Search" />
                <div>
                    @Html.DropDownList("Genre",
                                     new SelectList(Enum.GetValues(typeof(LibraryService.Models.Genre))),
                                     "Select Genre",
                                     new { @class = "form-control" })
                </div>
                <div>
                    @Html.DropDownList("Status",
                                     new SelectList(Enum.GetValues(typeof(LibraryService.Models.Status))),
                                     "Select Status",
                                     new { @class = "form-control" })
                </div>
            </p>
        }

        @Html.ActionLink("See New books", "GetNewBooks")

        <table class="table" id="myTable">
            <tr>
                <th onclick="sort(0)">
                    @Html.DisplayNameFor(model => model.Title)
                </th>
                <th onclick="sort(1)">
                    @Html.DisplayNameFor(model => model.Publisher)
                </th>
                <th onclick="sort(2)">
                    @Html.DisplayNameFor(model => model.Pages)
                </th>
                <th onclick="sort(3)">
                    @Html.DisplayNameFor(model => model.BookGenre)
                </th>
                <th onclick="sort(4)">
                    @Html.DisplayNameFor(model => model.LibraryId)
                </th>
                <th onclick="sort(5)">
                    @Html.DisplayNameFor(model => model.Status)
                </th>
                <th onclick="sort(6)">
                    @Html.DisplayNameFor(model => model.AgeRestriction)
                </th>
                <th onclick="sort(7)">
                    @Html.DisplayNameFor(model => model.PurchaseValue)
                </th>
                <th onclick="sort(8)">
                    @Html.DisplayNameFor(model => model.PublishedAt)
                </th>
                <th onclick="sort(9)">
                    @Html.DisplayNameFor(model => model.DateAdded)
                </th>
                <th></th>
            </tr>

            @foreach (var item in ViewBag.OnePageOfProducts)
            {
            <tr>
                <td>
                    @item.Title
                </td>
                <td>
                    @item.Publisher
                </td>
                <td>
                    @item.Pages
                </td>
                <td>
                    @item.BookGenre
                </td>
                <td>
                    @item.LibraryId
                </td>
                <td>
                    @item.Status
                </td>
                <td>
                    @item.AgeRestriction.ToString().Replace("_", " ")
                </td>
                <td>
                    @item.PurchaseValue
                </td>
                <td>
                    @item.PublishedAt.Year
                </td>
                <td>
                    @item.DateAdded.Date.ToString("MM/dd/yyyy")
                </td>

                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.id })
                    @if (Request.IsAuthenticated)
                    {
                        <div>
                            |
                            @Html.ActionLink("Reserve", "Reserve", new { id = item.id })|
                            @Html.ActionLink("Bookmark", "Bookmark", new { id = item.id })
                        </div>
                    }
                </td>
            </tr>
            }

            @Html.PagedListPager((IPagedList)ViewBag.OnePageOfProducts, page => Url.Action("Index", new { page }))

        </table>
    }
    else
    {
        <h2>Sorry.</h2>
        <p>We can't find any books you are looking for</p>
        @Html.ActionLink("Back to List", "Index")
    }
}

<script>
    function sort(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("myTable");
        switching = true;
        // Set the sorting direction to ascending:
        dir = "asc";
        /* Make a loop that will continue until
       no switching has been done: */
        while (switching) {
            // Start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /* Loop through all table rows (except the
            first, which contains table headers): */
            for (i = 1; i < (rows.length - 1); i++) {
                // Start by saying there should be no switching:
                shouldSwitch = false;
                /* Get the two elements you want to compare,
                one from current row and one from the next: */
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /* Check if the two rows should switch place,
               based on the direction, asc or desc: */
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /* If a switch has been marked, make the switch
               and mark that a switch has been done: */
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                // Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /* If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again. */
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
</script>
