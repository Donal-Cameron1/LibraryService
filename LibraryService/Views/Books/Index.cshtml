
@model IEnumerable<LibraryService.Models.Book>

@{
    ViewBag.Title = "Index";
}

@using PagedList.Mvc;
@using PagedList;

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    PagedList<LibraryService.Models.Book> books = ViewBag.onePageOfBooks;
    if (books.Count > 0)
    {
        <h2>List of Books</h2>
        if(this.User.IsInRole("Admin") || this.User.IsInRole("Staff"))
        {
        <p>
            @Html.ActionLink("Create New", "Create") 
        </p>
        }

        using (Html.BeginForm())
        {
            <p>
                Search books: @Html.TextBox("SearchString")
                <input type="submit" value="Search" />
                <div>
                    @Html.DropDownList("Genre",
                                     new SelectList(Enum.GetValues(typeof(LibraryService.Models.Genre))),
                                     "Select Genre",
                                     new { @class = "form-control" })
                </div>
                <div>
                    @Html.DropDownList("Status",
                                     new SelectList(Enum.GetValues(typeof(LibraryService.Models.Status))),
                                     "Select Status",
                                     new { @class = "form-control" })
                </div>
            </p>
        }

    <table class="table" id="myTable">
        <thead class="bg-info">
            <tr>
                <th onclick="sort(0)" onmouseover="this.style.textDecoration = 'underline'" onmouseout="this.style.textDecoration = 'none'">
                    @Html.DisplayNameFor(model => model.Title)
                </th>
                <th onclick="sort(1)" onmouseover="this.style.textDecoration = 'underline'" onmouseout="this.style.textDecoration = 'none'">
                    @Html.DisplayNameFor(model => model.Author)
                </th>
                <th onclick="sort(2)" onmouseover="this.style.textDecoration = 'underline'" onmouseout="this.style.textDecoration = 'none'">
                    @Html.DisplayNameFor(model => model.BookGenre)
                </th>
                <th onclick="sort(3)" onmouseover="this.style.textDecoration = 'underline'" onmouseout="this.style.textDecoration = 'none'">
                    @Html.DisplayNameFor(model => model.LibraryId)
                </th>
                <th onclick="sort(4)" onmouseover="this.style.textDecoration = 'underline'" onmouseout="this.style.textDecoration = 'none'">
                    @Html.DisplayNameFor(model => model.Status)
                </th>
                <th></th>
            </tr>
            </thead>
            @foreach (var item in ViewBag.OnePageOfBooks)
            {
        <tr>
            <td>
                @item.Title
            </td>
            <td>
                @item.Author
            </td>
            <td>
                @item.BookGenre
            </td>
            <td>
                @(new LibraryService.DAL.LibraryContext().Libraries.Find(item.LibraryId).Name)
            </td>
            <td>
                @item.Status
            </td>

            <td>
                @if (this.User.IsInRole("Admin") || this.User.IsInRole("Staff"))
                {
                <div>
                    @Html.ActionLink("Edit", "Edit", new { id = item.id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.id })
                </div>
                }
                else
                {
                    @Html.ActionLink("Details", "Details", new { id = item.id })
                    if (Request.IsAuthenticated)
                    {
                <div>
                    | @Html.ActionLink("Reserve", "Reserve", new { id = item.id }) |
                    @Html.ActionLink("Bookmark", "Bookmark", new { id = item.id })
                </div>
                    }
                }
            </td>
        </tr>
            }

            @Html.PagedListPager((IPagedList)ViewBag.OnePageOfBooks, page => Url.Action("Index", new { page }))

        </table>
    }
    else
    {
        <h2>Sorry.</h2>
        <p>We can't find any books you are looking for</p>
        @Html.ActionLink("Back to List", "Index")
    }
}

<script>
    function sort(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("myTable");
        switching = true;
        // Set the sorting direction to ascending:
        dir = "asc";
        /* Make a loop that will continue until
       no switching has been done: */
        while (switching) {
            // Start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /* Loop through all table rows (except the
            first, which contains table headers): */
            for (i = 1; i < (rows.length - 1); i++) {
                // Start by saying there should be no switching:
                shouldSwitch = false;
                /* Get the two elements you want to compare,
                one from current row and one from the next: */
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /* Check if the two rows should switch place,
               based on the direction, asc or desc: */
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /* If a switch has been marked, make the switch
               and mark that a switch has been done: */
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                // Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /* If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again. */
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
</script>
