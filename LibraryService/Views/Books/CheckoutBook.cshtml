@model IEnumerable<LibraryService.Models.Book>

@{
    var books = Model;
    var message = "";
    ViewBag.Title = "Index";
    var customerId = ViewBag.Customer;
    if (ViewBag.message != null)
    { message = ViewBag.message; }
    else
    {
        message = null;
    }
}

@using PagedList.Mvc;
@using PagedList;

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

<div class="bg-info">
    <h2>Select Library Items for Customer: @customerId</h2>
    @Html.ActionLink("View Basket", "ShowBasket")
</div>

@if (message != null)
{
<div class="bg-success">
    @message
</div>
}
@{
    <table class="table" id="myTable">
        <tr>
            <th> </th>
            <th onclick="sort(1)">
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th onclick="sort(2)">
                @Html.DisplayNameFor(model => model.Publisher)
            </th>
            <th onclick="sort(3)">
                @Html.DisplayNameFor(model => model.Pages)
            </th>
            <th onclick="sort(4)">
                @Html.DisplayNameFor(model => model.BookGenre)
            </th>
            <th onclick="sort(5)">
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th onclick="sort(6)">
                @Html.DisplayNameFor(model => model.AgeRestriction)
            </th>
            <th onclick="sort(7)">
                @Html.DisplayNameFor(model => model.PurchaseValue)
            </th>
            <th onclick="sort(8)">
                @Html.DisplayNameFor(model => model.PublishedAt)
            </th>
            <th></th>
        </tr>

        @foreach (var item in books)
        {
        <tr>
            <td>
                @Html.ActionLink("Select", "SelectBook", new { id = item.id })
            </td>
            <td>
                @item.Title
            </td>
            <td>
                @item.Publisher
            </td>
            <td>
                @item.Pages
            </td>
            <td>
                @item.BookGenre
            </td>
            <td>
                @item.Status
            </td>
            <td>
                @item.AgeRestriction.ToString().Replace("_", " ")
            </td>
            <td>
                @item.PurchaseValue
            </td>
            <td>
                @item.PublishedAt
            </td>
            <td>
                @Html.ActionLink("Details", "Details", new { id = item.id })
                @if (Request.IsAuthenticated)
                    {
                <div>
                    @Html.ActionLink("Borrow", "Borrow", new { id = item.id })
                </div>
                    }
            </td>
        </tr>
        }
    </table>
}

<script>
    function sort(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("myTable");
        switching = true;
        // Set the sorting direction to ascending:
        dir = "asc";
        /* Make a loop that will continue until
       no switching has been done: */
        while (switching) {
            // Start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /* Loop through all table rows (except the
            first, which contains table headers): */
            for (i = 1; i < (rows.length - 1); i++) {
                // Start by saying there should be no switching:
                shouldSwitch = false;
                /* Get the two elements you want to compare,
                one from current row and one from the next: */
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /* Check if the two rows should switch place,
               based on the direction, asc or desc: */
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /* If a switch has been marked, make the switch
               and mark that a switch has been done: */
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                // Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /* If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again. */
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
</script>
